/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/tail.select/js/tail.select.js":
/*!****************************************************!*\
  !*** ./node_modules/tail.select/js/tail.select.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*\r\n |  tail.select - The vanilla solution to make your HTML select fields AWESOME!\r\n |  @file       ./js/tail.select.js\r\n |  @author     SamBrishes <sam@pytes.net>\r\n |  @version    0.5.15 - Beta\r\n |\r\n |  @website    https://github.com/pytesNET/tail.select\r\n |  @license    X11 / MIT License\r\n |  @copyright  Copyright © 2014 - 2019 SamBrishes, pytesNET <info@pytes.net>\r\n */\r\n;(function(root, factory){\r\n    if(true){\r\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function(){ return factory(root); }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n    } else {}\r\n}(window, function(root){\r\n    \"use strict\";\r\n    var w = root, d = root.document;\r\n\r\n    // Internal Helper Methods\r\n    function cHAS(el, name){\r\n        return (el && \"classList\" in el)? el.classList.contains(name): false;\r\n    }\r\n    function cADD(el, name){\r\n        return (el && \"classList\" in el)? el.classList.add(name): undefined;\r\n    }\r\n    function cREM(el, name){\r\n        return (el && \"classList\" in el)? el.classList.remove(name): undefined;\r\n    }\r\n    function trigger(el, event, opt){\r\n        if(CustomEvent && CustomEvent.name){\r\n            var ev = new CustomEvent(event, opt);\r\n        } else {\r\n            var ev = d.createEvent(\"CustomEvent\");\r\n            ev.initCustomEvent(event, !!opt.bubbles, !!opt.cancelable, opt.detail);\r\n        }\r\n        return el.dispatchEvent(ev);\r\n    }\r\n    function clone(obj, rep){\r\n        if(typeof Object.assign === \"function\"){\r\n            return Object.assign({}, obj, rep || {});\r\n        }\r\n        var clone = Object.constructor();\r\n        for(var key in obj){\r\n            clone[key] = (key in rep)? rep[key]: obj[key];\r\n        }\r\n        return clone;\r\n    }\r\n    function create(tag, classes){\r\n        var r = d.createElement(tag);\r\n            r.className = (classes && classes.join)? classes.join(\" \"): classes || \"\";\r\n        return r;\r\n    }\r\n\r\n    /*\r\n     |  SELECT CONSTRUCTOR\r\n     |  @since  0.5.12 [0.3.0]\r\n     */\r\n    var select = function(el, config){\r\n        el = (typeof(el) == \"string\")? d.querySelectorAll(el): el;\r\n        if(el instanceof NodeList || el instanceof HTMLCollection || el instanceof Array){\r\n            for(var _r = [], l = el.length, i = 0; i < l; i++){\r\n                _r.push(new select(el[i], clone(config, {})));\r\n            }\r\n            return (_r.length === 1)? _r[0]: ((_r.length === 0)? false: _r);\r\n        }\r\n        if(!(el instanceof Element) || !(this instanceof select)){\r\n            return !(el instanceof Element)? false: new select(el, config);\r\n        }\r\n\r\n        // Check Element\r\n        if(select.inst[el.getAttribute(\"data-tail-select\")]){\r\n            return select.inst[el.getAttribute(\"data-tail-select\")];\r\n        }\r\n        if(el.getAttribute(\"data-select\")){\r\n            var test = JSON.parse(el.getAttribute(\"data-select\").replace(/\\'/g, '\"'));\r\n            if(test instanceof Object){\r\n                config = clone(config, test); // This is a unofficial function ;3\r\n            }\r\n        }\r\n\r\n        // Get Element Options\r\n        var placeholder = el.getAttribute(\"placeholder\") || el.getAttribute(\"data-placeholder\"),\r\n            fb1 = \"bindSourceSelect\", fb2 = \"sourceHide\"; // Fallbacks\r\n        config = (typeof(config) == \"object\")? config: {};\r\n        config.multiple = (\"multiple\" in config)? config.multiple: el.multiple;\r\n        config.disabled = (\"disabled\" in config)? config.disabled: el.disabled;\r\n        config.placeholder = placeholder || config.placeholder || null;\r\n        config.width = (config.width === \"auto\")? el.offsetWidth + 50: config.width;\r\n        config.sourceBind = (fb1 in config)? config[fb1]: config.sourceBind || false;\r\n        config.sourceHide = (fb2 in config)? config[fb2]: config.sourceHide || true;\r\n        config.multiLimit = (config.multiLimit >= 0)? config.multiLimit: Infinity;\r\n\r\n        // Init Instance\r\n        this.e = el;\r\n        this.id = ++select.count;\r\n        this.con = clone(select.defaults, config);\r\n        this.events = {};\r\n        select.inst[\"tail-\" + this.id] = this;\r\n        return this.init().bind();\r\n    }, options;\r\n    select.version = \"0.5.15\";\r\n    select.status = \"beta\";\r\n    select.count = 0;\r\n    select.inst = {};\r\n\r\n    /*\r\n     |  STORAGE :: DEFAULT OPTIONS\r\n     */\r\n    select.defaults = {\r\n        animate: true,              // [0.3.0]      Boolean\r\n        classNames: null,           // [0.2.0]      Boolean, String, Array, null\r\n        csvOutput: false,           // [0.3.4]      Boolean\r\n        csvSeparator: \",\",          // [0.3.4]      String\r\n        descriptions: false,        // [0.3.0]      Boolean\r\n        deselect: false,            // [0.3.0]      Boolean\r\n        disabled: false,            // [0.5.0]      Boolean\r\n        height: 350,                // [0.2.0]      Integer, null\r\n        hideDisabled: false,        // [0.3.0]      Boolean\r\n        hideSelected: false,        // [0.3.0]      Boolean\r\n        items: {},                  // [0.3.0]      Object\r\n        locale: \"en\",               // [0.5.0]      String\r\n        linguisticRules: {          // [0.5.9]      Object\r\n            \"е\": \"ё\",\r\n            \"a\": \"ä\",\r\n            \"o\": \"ö\",\r\n            \"u\": \"ü\",\r\n            \"ss\": \"ß\"\r\n        },\r\n        multiple: false,            // [0.2.0]      Boolean\r\n        multiLimit: Infinity,       // [0.3.0]      Integer, Infinity\r\n        multiPinSelected: false,    // [0.5.0]      Boolean\r\n        multiContainer: false,      // [0.3.0]      Boolean, String\r\n        multiShowCount: true,       // [0.3.0]      Boolean\r\n        multiShowLimit: false,      // [0.5.0]      Boolean\r\n        multiSelectAll: false,      // [0.4.0]      Boolean\r\n        multiSelectGroup: true,     // [0.4.0]      Boolean\r\n        openAbove: null,            // [0.3.0]      Boolean, null\r\n        placeholder: null,          // [0.2.0]      String, null\r\n        search: false,              // [0.3.0]      Boolean\r\n        searchConfig: [             // [0.5.13]     Array\r\n            \"text\", \"value\"\r\n        ],\r\n        searchFocus: true,          // [0.3.0]      Boolean\r\n        searchMarked: true,         // [0.3.0]      Boolean\r\n        searchMinLength: 1,         // [0.5.13]     Integer\r\n        searchDisabled: true,       // [0.5.5]      Boolean\r\n        sortItems: false,           // [0.3.0]      String, Function, false\r\n        sortGroups: false,          // [0.3.0]      String, Function, false\r\n        sourceBind: false,          // [0.5.0]      Boolean\r\n        sourceHide: true,           // [0.5.0]      Boolean\r\n        startOpen: false,           // [0.3.0]      Boolean\r\n        stayOpen: false,            // [0.3.0]      Boolean\r\n        width: null,                // [0.2.0]      Integer, String, null\r\n        cbComplete: undefined,      // [0.5.0]      Function\r\n        cbEmpty: undefined,         // [0.5.0]      Function\r\n        cbLoopItem: undefined,      // [0.4.0]      Function\r\n        cbLoopGroup: undefined      // [0.4.0]      Function\r\n    };\r\n\r\n    /*\r\n     |  STORAGE :: STRINGS\r\n     */\r\n    select.strings = {\r\n        en: {\r\n            all: \"All\",\r\n            none: \"None\",\r\n            empty: \"No Options available\",\r\n            emptySearch: \"No Options found\",\r\n            limit: \"You can't select more Options\",\r\n            placeholder: \"Select an Option...\",\r\n            placeholderMulti: \"Select up to :limit Options...\",\r\n            search: \"Type in to search...\",\r\n            disabled: \"This Field is disabled\"\r\n        },\r\n        modify: function(locale, id, string){\r\n            if(!(locale in this)){\r\n                return false;\r\n            }\r\n            if((id instanceof Object)){\r\n                for(var key in id){\r\n                    this.modify(locale, key, id[key]);\r\n                }\r\n            } else {\r\n                this[locale][id] = (typeof(string) == \"string\")? string: this[locale][id];\r\n            }\r\n            return true;\r\n        },\r\n        register: function(locale, object){\r\n            if(typeof(locale) != \"string\" || !(object instanceof Object)){\r\n                return false;\r\n            }\r\n            this[locale] = object;\r\n            return true;\r\n        }\r\n    };\r\n\r\n    /*\r\n     |  TAIL.SELECT HANDLER\r\n     */\r\n    select.prototype = {\r\n        /*\r\n         |  INERNAL :: TRANSLATE\r\n         |  @since  0.5.8 [0.5.8]\r\n         */\r\n        _e: function(string, replace, def){\r\n            if(!(string in this.__)){\r\n                return (!def)? string: def;\r\n            }\r\n\r\n            var string = this.__[string];\r\n            if(typeof(string) === \"function\"){\r\n                string = string.call(this, replace);\r\n            }\r\n            if(typeof(replace) === \"object\"){\r\n                for(var key in replace){\r\n                    string = string.replace(key, replace[key]);\r\n                }\r\n            }\r\n            return string;\r\n        },\r\n\r\n        /*\r\n         |  INTERNAL :: INIT SELECT FIELD\r\n         |  @since  0.5.13 [0.3.0]\r\n         */\r\n        init: function(){\r\n            var self = this, classes = [\"tail-select\"], con = this.con,\r\n                regexp = /^[0-9.]+(?:cm|mm|in|px|pt|pc|em|ex|ch|rem|vw|vh|vmin|vmax|\\%)$/i;\r\n\r\n            // Init ClassNames\r\n            var c = (con.classNames === true)? this.e.className: con.classNames;\r\n            classes.push((c && c.push)? c.join(\" \"): (c && c.split)? c: \"no-classes\");\r\n            if(con.hideSelected){    classes.push(\"hide-selected\"); }\r\n            if(con.hideDisabled){    classes.push(\"hide-disabled\"); }\r\n            if(con.multiLimit == 0){ classes.push(\"disabled\");      }\r\n            if(con.multiple){        classes.push(\"multiple\");      }\r\n            if(con.deselect){        classes.push(\"deselect\");      }\r\n            if(con.disabled){        classes.push(\"disabled\");      }\r\n\r\n            // Init Variables\r\n            this.__ = clone(select.strings.en, select.strings[con.locale] || {});\r\n            this._init = true;\r\n            this._query = false;\r\n            this.select = create(\"DIV\", classes);\r\n            this.label = create(\"DIV\", \"select-label\");\r\n            this.dropdown = create(\"DIV\", \"select-dropdown\");\r\n            this.search = create(\"DIV\", \"dropdown-search\");\r\n            this.csvInput = create(\"INPUT\", \"select-search\");\r\n\r\n            // Build :: Select\r\n            if(this.e.getAttribute(\"tabindex\") !== null){\r\n                this.select.setAttribute(\"tabindex\", this.e.getAttribute(\"tabindex\"));\r\n            } else {\r\n                this.select.setAttribute(\"tabindex\", 0);\r\n            }\r\n            if(con.width && regexp.test(con.width)){\r\n                this.select.style.width = con.width;\r\n            } else if(con.width && !isNaN(parseFloat(con.width, 10))){\r\n                this.select.style.width = con.width + \"px\";\r\n            }\r\n\r\n            // Build :: Label\r\n            this.label.addEventListener(\"click\", function(event){\r\n                self.toggle.call(self, self.con.animate);\r\n            });\r\n            this.select.appendChild(this.label);\r\n\r\n            // Build :: Dropdown\r\n            if(!isNaN(parseInt(con.height, 10))){\r\n                this.dropdown.style.maxHeight = parseInt(con.height, 10) + \"px\";\r\n            }\r\n            if(con.search){\r\n                this.search.innerHTML = '<input type=\"text\" class=\"search-input\" />';\r\n                this.search.children[0].placeholder = this._e(\"search\");\r\n                this.search.children[0].addEventListener(\"input\", function(event){\r\n                    self.query.call(self, (this.value.length > con.searchMinLength)? this.value: undefined);\r\n                });\r\n                this.dropdown.appendChild(this.search);\r\n            }\r\n            this.select.appendChild(this.dropdown);\r\n\r\n            // Build :: CSV Input\r\n            this.csvInput.type = \"hidden\";\r\n            if(con.csvOutput){\r\n                this.csvInput.name = this.e.name;\r\n                this.e.removeAttribute(\"name\");\r\n                this.select.appendChild(this.csvInput);\r\n            }\r\n\r\n            // Prepare Container\r\n            if(con.multiple && con.multiContainer){\r\n                if(d.querySelector(con.multiContainer)){\r\n                    this.container = d.querySelector(con.multiContainer);\r\n                    this.container.className += \" tail-select-container\";\r\n                } else if(con.multiContainer === true){\r\n                    this.container = this.label;\r\n                    this.container.className += \" tail-select-container\";\r\n                }\r\n            }\r\n\r\n            // Prepare Options\r\n            this.options = new options(this.e, this);\r\n            for(var l = this.e.options.length, i = 0; i < l; i++){\r\n                this.options.set(this.e.options[i], false);\r\n            }\r\n            for(var key in con.items){\r\n                if(typeof(con.items[key]) == \"string\"){\r\n                    con.items[key] = {value: con.items[key]};\r\n                }\r\n                this.options.add(con.items[key].key || key, con.items[key].value,\r\n                    con.items[key].group, con.items[key].selected,\r\n                    con.items[key].disabled, con.items[key].description);\r\n            }\r\n            this.query();\r\n\r\n            // Append and Return\r\n            if(this.e.nextElementSibling){\r\n                this.e.parentElement.insertBefore(this.select, this.e.nextElementSibling);\r\n            } else {\r\n                this.e.parentElement.appendChild(this.select);\r\n            }\r\n            if(con.sourceHide){\r\n                if(this.e.style.display == \"none\"){\r\n                    this.select.style.display = \"none\";\r\n                    this.e.setAttribute(\"data-select-hidden\", \"display\");\r\n                } else if(this.e.style.visibility == \"hidden\"){\r\n                    this.select.style.visibiltiy = \"hidden\";\r\n                    this.e.setAttribute(\"data-select-hidden\", \"visibility\");\r\n                } else {\r\n                    this.e.style.display = \"none\";\r\n                    this.e.setAttribute(\"data-select-hidden\", \"0\");\r\n                }\r\n            }\r\n            this.e.setAttribute(\"data-tail-select\", \"tail-\" + this.id);\r\n            if(self.con.startOpen){\r\n                this.open(con.animate);\r\n            }\r\n            (con.cbComplete || function(){ }).call(this, this.select);\r\n            return (this._init = false)? this: this;\r\n        },\r\n\r\n        /*\r\n         |  INTERNAL :: EVENT LISTENER\r\n         |  @since  0.5.13 [0.3.0]\r\n         */\r\n        bind: function(){\r\n            var self = this;\r\n\r\n            // Keys Listener\r\n            d.addEventListener(\"keydown\", function(event){\r\n                var key = (event.keyCode || event.which), opt, inner, e, temp, tmp;\r\n                var space = (key == 32 && self.select === document.activeElement);\r\n                if(!space && (!cHAS(self.select, \"active\") || [13, 27, 38, 40].indexOf(key) < 0)){\r\n                    return false;\r\n                }\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n\r\n                // Space\r\n                if(key === 32){\r\n                    return self.open(self.con.animate);\r\n                }\r\n\r\n                // Enter || Escape\r\n                if(key == 13){\r\n                    if((opt = self.dropdown.querySelector(\".dropdown-option.hover:not(.disabled)\"))){\r\n                        self.options.select.call(self.options, opt);\r\n                    }\r\n                }\r\n                if(key == 27 || key == 13){\r\n                    return self.close(self.con.animate);\r\n                }\r\n\r\n                // Top || Down\r\n                if((opt = self.dropdown.querySelector(\".dropdown-option.hover:not(.disabled)\"))){\r\n                    cREM(opt, \"hover\"); e = [((key == 40)? \"next\": \"previous\") + \"ElementSibling\"];\r\n                    do {\r\n                        if((temp = opt[e]) !== null && opt.tagName == \"LI\"){\r\n                            opt = temp;\r\n                        } else if((temp = opt.parentElement[e]) !== null && temp.children.length > 0 && temp.tagName == \"UL\"){\r\n                            opt = temp.children[(key == 40)? 0: temp.children.length-1];\r\n                        } else {\r\n                            opt = false;\r\n                        }\r\n                        if(opt && (!cHAS(opt, \"dropdown-option\") || cHAS(opt, \"disabled\"))){\r\n                            continue;\r\n                        }\r\n                        break;\r\n                    } while(true);\r\n                }\r\n                if(!opt && key == 40){\r\n                    opt = self.dropdown.querySelector(\".dropdown-option:not(.disabled)\");\r\n                } else if(!opt && key == 38){\r\n                    tmp = self.dropdown.querySelectorAll(\".dropdown-option:not(.disabled)\");\r\n                    opt = tmp[tmp.length - 1];\r\n                }\r\n                if(opt && (inner = self.dropdown.querySelector(\".dropdown-inner\"))){\r\n                    var pos = (function(el){\r\n                        var _r = {top: el.offsetTop, height: el.offsetHeight};\r\n                        while((el = el.parentElement) != inner){\r\n                            _r.top += el.offsetTop;\r\n                        }\r\n                        return _r;\r\n                    })(opt);\r\n                    cADD(opt, \"hover\");\r\n                    inner.scrollTop = Math.max(0, pos.top - (pos.height * 2));\r\n                }\r\n                return true;\r\n            });\r\n\r\n            // Close\r\n            d.addEventListener(\"click\", function(ev){\r\n                if(!cHAS(self.select, \"active\") || cHAS(self.select, \"idle\")){ return false; }\r\n                if(self.con.stayOpen === true){ return false; }\r\n\r\n                var targets = [self.e, self.select, self.container];\r\n                for(var l = targets.length, i = 0; i < l; i++){\r\n                    if(targets[i] && (targets[i].contains(ev.target) || targets[i] == ev.target)){\r\n                        return false;\r\n                    }\r\n                    if(!ev.target.parentElement){ return false; }\r\n                }\r\n                return self.close.call(self, self.con.animate);\r\n            });\r\n\r\n            // Bind Source Select\r\n            if(!this.con.sourceBind){\r\n                return true;\r\n            }\r\n            this.e.addEventListener(\"change\", function(event){\r\n                if(event.detail != undefined){\r\n                    return false;\r\n                }\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                if(!this.multiple && this.selectedIndex){\r\n                    self.options.select.call(self.options, this.options[this.selectedIndex]);\r\n                } else {\r\n                    var u = [].concat(self.options.selected);\r\n                    var s = [].filter.call(this.querySelectorAll(\"option:checked\"), function(item){\r\n                        if(u.indexOf(item) >= 0){\r\n                            u.splice(u.indexOf(item), 1);\r\n                            return false;\r\n                        }\r\n                        return true;\r\n                    });\r\n                    self.options.walk.call(self.options, \"unselect\", u);\r\n                    self.options.walk.call(self.options, \"select\", s);\r\n                }\r\n            });\r\n            return true;\r\n        },\r\n\r\n        /*\r\n         |  INTERNAL :: INTERNAL CALLBACK\r\n         |  @since  0.5.14 [0.3.0]\r\n         */\r\n        callback: function(item, state, _force){\r\n            var rkey = item.key.replace(/('|\\\\)/g, \"\\\\$1\"),\r\n                rgrp = item.group.replace(/('|\\\\)/g, \"\\\\$1\"),\r\n                rsel = \"[data-key='\" + rkey + \"'][data-group='\" + rgrp + \"']\";\r\n            if(state == \"rebuild\"){ return this.query(); }\r\n\r\n            // Set Element-Item States\r\n            var element = this.dropdown.querySelector(rsel);\r\n            if(element && [\"select\", \"disable\"].indexOf(state) >= 0){\r\n                cADD(element, (state == \"select\"? \"selected\": \"disabled\"));\r\n            } else if(element && [\"unselect\", \"enable\"].indexOf(state) >= 0){\r\n                cREM(element, (state == \"unselect\"? \"selected\": \"disabled\"));\r\n            }\r\n\r\n            // Handle\r\n            this.update(item);\r\n            return (_force === true)? true: this.trigger(\"change\", item, state);\r\n        },\r\n\r\n        /*\r\n         |  INTERNAL :: TRIGGER EVENT HANDLER\r\n         |  @since  0.5.2 [0.4.0]\r\n         */\r\n        trigger: function(event){\r\n            if(this._init){ return false; }\r\n            var obj = {bubbles: false, cancelable: true, detail: {args: arguments, self: this}};\r\n            if(event == \"change\" && arguments[2] && arguments[2].indexOf(\"select\") >= 0){\r\n                trigger(this.e, \"input\", obj);\r\n                trigger(this.e, \"change\", obj);\r\n            }\r\n            trigger(this.select, \"tail::\" + event, obj);\r\n\r\n            var args = [], pass;\r\n            Array.prototype.map.call(arguments, function(item, i){\r\n                if(i > 0){ args.push(item); }\r\n            });\r\n            (this.events[event] || []).forEach(function(item){\r\n                pass = [].concat(args);\r\n                pass.push(item.args || null);\r\n                (item.cb || function(){ }).apply(obj.detail.self, pass);\r\n            });\r\n            return true;\r\n        },\r\n\r\n        /*\r\n         |  INTERNAL :: CALCULATE DROPDOWN\r\n         |  @since  0.5.4 [0.5.0]\r\n         */\r\n        calc: function(){\r\n            var clone = this.dropdown.cloneNode(true), height = this.con.height, search = 0,\r\n                inner = this.dropdown.querySelector(\".dropdown-inner\");\r\n\r\n            // Calculate Dropdown Height\r\n            clone = this.dropdown.cloneNode(true);\r\n            clone.style.cssText = \"height:auto;min-height:auto;max-height:none;opacity:0;display:block;visibility:hidden;\";\r\n            clone.style.maxHeight = this.con.height + \"px\";\r\n            clone.className += \" cloned\";\r\n            this.dropdown.parentElement.appendChild(clone);\r\n            height = (height > clone.clientHeight)? clone.clientHeight: height;\r\n            if(this.con.search){\r\n                search = clone.querySelector(\".dropdown-search\").clientHeight;\r\n            }\r\n            this.dropdown.parentElement.removeChild(clone);\r\n\r\n            // Calculate Viewport\r\n            var pos = this.select.getBoundingClientRect(),\r\n                bottom = w.innerHeight-(pos.top+pos.height),\r\n                view = ((height+search) > bottom)? pos.top > bottom: false;\r\n            if(this.con.openAbove === true || (this.con.openAbove !== false && view)){\r\n                view = true, height = Math.min((height), pos.top-10);\r\n                cADD(this.select, \"open-top\");\r\n            } else {\r\n                view = false, height = Math.min((height), bottom-10);\r\n                cREM(this.select, \"open-top\");\r\n            }\r\n            if(inner){\r\n                this.dropdown.style.maxHeight = height + \"px\";\r\n                inner.style.maxHeight = (height-search) + \"px\";\r\n            }\r\n            return this;\r\n        },\r\n\r\n        /*\r\n         |  API :: QUERY OPTIONS\r\n         |  @since  0.5.13 [0.5.0]\r\n         */\r\n        query: function(search, conf){\r\n            var item, tp, ul, li, a1, a2;                           // Pre-Definition\r\n            var self = this, con = this.con, g = \"getAttribute\";    // Shorties\r\n            var root = create(\"DIV\", \"dropdown-inner\"),             // Contexts\r\n                func = (!search)? \"walker\": \"finder\",\r\n                args = (!search)? [con.sortItems, con.sortGroups]: [search, conf];\r\n\r\n            // Option Walker\r\n            this._query = (typeof(search) == \"string\")? search: false;\r\n            while(item = this.options[func].apply(this.options, args)){\r\n                if(!ul || (ul && ul[g](\"data-group\") !== item.group)){\r\n                    tp = (con.cbLoopGroup || this.cbGroup).call(this, item.group, search, root);\r\n                    if(tp instanceof Element){\r\n                        ul = tp;\r\n                        ul.setAttribute(\"data-group\", item.group);\r\n                        root.appendChild(ul);\r\n                    } else { break; }\r\n                }\r\n\r\n                // Create Item\r\n                if((li = (con.cbLoopItem || this.cbItem).call(this, item, ul, search, root)) === null){\r\n                    continue;\r\n                }\r\n                if(li === false){ break; }\r\n                li.setAttribute(\"data-key\", item.key);\r\n                li.setAttribute(\"data-group\", item.group);\r\n                li.addEventListener(\"click\", function(event){\r\n                    if(!this.hasAttribute(\"data-key\")){ return false; }\r\n                    var key = this[g](\"data-key\"), group = this[g](\"data-group\") || \"#\";\r\n                    if(self.options.toggle.call(self.options, key, group)){\r\n                        if(self.con.stayOpen === false && !self.con.multiple){\r\n                            self.close.call(self, self.con.animate);\r\n                        }\r\n                    }\r\n                });\r\n                ul.appendChild(li);\r\n            }\r\n\r\n            // Empty\r\n            var count = root.querySelectorAll(\"*[data-key]\").length;\r\n            if(count == 0){\r\n                (this.con.cbEmpty || function(element){\r\n                    var li = create(\"SPAN\", \"dropdown-empty\");\r\n                    li.innerText = this._e(\"empty\");\r\n                    element.appendChild(li);\r\n                }).call(this, root, search);\r\n            }\r\n\r\n            // Select All\r\n            if(count > 0 && con.multiple && con.multiLimit == Infinity && con.multiSelectAll){\r\n                a1 = create(\"BUTTON\", \"tail-all\"), a2 = create(\"BUTTON\", \"tail-none\");\r\n                a1.innerText = this._e(\"all\");\r\n                a1.addEventListener(\"click\", function(event){\r\n                    event.preventDefault();\r\n                    var options = self.dropdown.querySelectorAll(\".dropdown-inner .dropdown-option\");\r\n                    self.options.walk.call(self.options, \"select\", options);\r\n                })\r\n                a2.innerText = this._e(\"none\");\r\n                a2.addEventListener(\"click\", function(event){\r\n                    event.preventDefault();\r\n                    var options = self.dropdown.querySelectorAll(\".dropdown-inner .dropdown-option\");\r\n                    self.options.walk.call(self.options, \"unselect\", options);\r\n                })\r\n\r\n                // Add Element\r\n                li = create(\"SPAN\", \"dropdown-action\");\r\n                li.appendChild(a1);\r\n                li.appendChild(a2);\r\n                root.insertBefore(li, root.children[0]);\r\n            }\r\n\r\n            // Add and Return\r\n            var data = this.dropdown.querySelector(\".dropdown-inner\");\r\n            this.dropdown[(data? \"replace\": \"append\") + \"Child\"](root, data);\r\n            if(cHAS(this.select, \"active\")){\r\n                this.calc();\r\n            }\r\n            return this.updateCSV().updateLabel();\r\n        },\r\n\r\n        /*\r\n         |  API :: CALLBACK -> CREATE GROUP\r\n         |  @since  0.5.8 [0.4.0]\r\n         */\r\n        cbGroup: function(group, search){\r\n            var ul = create(\"UL\", \"dropdown-optgroup\"), self = this, a1, a2;\r\n            if(group == \"#\"){ return ul; }\r\n            ul.innerHTML = '<li class=\"optgroup-title\"><b>' + group + '</b></li>';\r\n            if(this.con.multiple && this.con.multiLimit == Infinity && this.con.multiSelectAll){\r\n                a1 = create(\"BUTTON\", \"tail-none\"), a2 = create(\"BUTTON\", \"tail-all\");\r\n                a1.innerText = this._e(\"none\");\r\n                a1.addEventListener(\"click\", function(event){\r\n                    event.preventDefault();\r\n                    var grp = this.parentElement.parentElement.getAttribute(\"data-group\");\r\n                    self.options.all.call(self.options, \"unselect\", grp);\r\n                });\r\n                a2.innerText = this._e(\"all\");\r\n                a2.addEventListener(\"click\", function(event){\r\n                    event.preventDefault();\r\n                    var grp = this.parentElement.parentElement.getAttribute(\"data-group\");\r\n                    self.options.all.call(self.options, \"select\", grp);\r\n                });\r\n                ul.children[0].appendChild(a1);\r\n                ul.children[0].appendChild(a2);\r\n            }\r\n            return ul;\r\n        },\r\n\r\n        /*\r\n         |  API :: CALLBACK -> CREATE ITEM\r\n         |  @since  0.5.13 [0.4.0]\r\n         */\r\n        cbItem: function(item, optgroup, search){\r\n            var li = create(\"LI\", \"dropdown-option\" + (item.selected? \" selected\": \"\") + (item.disabled? \" disabled\": \"\"));\r\n\r\n            // Inner Text\r\n            if(search && search.length > 0 && this.con.searchMarked){\r\n                search = this.options.applyLinguisticRules(search);\r\n                li.innerHTML = item.value.replace(new RegExp(\"(\" + search + \")\", \"i\"), \"<mark>$1</mark>\");\r\n            } else {\r\n                li.innerText = item.value;\r\n            }\r\n\r\n            // Inner Description\r\n            if(this.con.descriptions && item.description){\r\n                li.innerHTML += '<span class=\"option-description\">' + item.description + '</span>';\r\n            }\r\n            return li;\r\n        },\r\n\r\n        /*\r\n         |  API :: UPDATE EVERYTHING\r\n         |  @since  0.5.0 [0.5.0]\r\n         */\r\n        update: function(item){\r\n            return this.updateLabel().updateContainer(item).updatePin(item).updateCSV(item);\r\n        },\r\n\r\n        /*\r\n         |  API :: UPDATE LABEL\r\n         |  @since  0.5.8 [0.5.0]\r\n         */\r\n        updateLabel: function(label){\r\n            if(this.container == this.label && this.options.selected.length > 0){\r\n                if(this.label.querySelector(\".label-inner\")){\r\n                    this.label.removeChild(this.label.querySelector(\".label-inner\"));\r\n                }\r\n                if(this.label.querySelector(\".label-count\")){\r\n                    this.label.removeChild(this.label.querySelector(\".label-count\"));\r\n                }\r\n                return this;\r\n            }\r\n            var c = this.con, len = this.options.selected.length, limit;\r\n            if(typeof(label) != \"string\"){\r\n                if(c.disabled){\r\n                    label = \"disabled\";\r\n                } else if(this.dropdown.querySelectorAll(\"*[data-key]\").length == 0){\r\n                    label = \"empty\" + (cHAS(this.select, \"in-search\")? \"Search\": \"\");\r\n                } else if(c.multiLimit <= len){\r\n                    label = \"limit\";\r\n                } else if(!c.multiple && this.options.selected.length > 0){\r\n                    label = this.options.selected[0].innerText;\r\n                } else if(typeof(c.placeholder) == \"string\"){\r\n                    label = c.placeholder;\r\n                } else {\r\n                    label = \"placeholder\" + (c.multiple && c.multiLimit < Infinity? \"Multi\": \"\");\r\n                }\r\n            }\r\n\r\n            // Set HTML\r\n            label = this._e(label, {\":limit\": c.multiLimit}, label);\r\n            label = '<span class=\"label-inner\">' + label + '</span>',\r\n            limit = (c.multiShowLimit && c.multiLimit < Infinity);\r\n            if(c.multiple && c.multiShowCount){\r\n                label = '<span class=\"label-count\">:c</span>' + label;\r\n                label = label.replace(\":c\", len + (limit? (\" / \" + c.multiLimit): \"\"));\r\n            }\r\n            this.label.innerHTML = label;\r\n            return this;\r\n        },\r\n\r\n        /*\r\n         |  API :: UPDATE CONTAINER\r\n         |  @since  0.5.0 [0.5.0]\r\n         */\r\n        updateContainer: function(item){\r\n            if(!this.container || !this.con.multiContainer){\r\n                return this;\r\n            }\r\n            var s = \"[data-group='\" + item.group + \"'][data-key='\" + item.key + \"']\";\r\n            if(this.container.querySelector(s)){\r\n                if(!item.selected){\r\n                    this.container.removeChild(this.container.querySelector(s));\r\n                }\r\n                return this;\r\n            }\r\n\r\n            // Create Item\r\n            if(item.selected){\r\n                var self = this, hndl = create(\"DIV\", \"select-handle\");\r\n                hndl.innerText = item.value;\r\n                hndl.setAttribute(\"data-key\", item.key);\r\n                hndl.setAttribute(\"data-group\", item.group);\r\n                hndl.addEventListener(\"click\", function(event){\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    var key = this.getAttribute(\"data-key\"), grp = this.getAttribute(\"data-group\");\r\n                    self.options.unselect.call(self.options, key, grp);\r\n                });\r\n                this.container.appendChild(hndl);\r\n            }\r\n            return this;\r\n        },\r\n\r\n        /*\r\n         |  API :: UPDATE PIN POSITION\r\n         |  @since  0.5.3 [0.5.0]\r\n         */\r\n        updatePin: function(item){\r\n            var inner = this.dropdown.querySelector(\".dropdown-inner ul\"),\r\n                option = \"li[data-key='\" + item.key + \"'][data-group='\" + item.group + \"']\";\r\n            if(!this.con.multiPinSelected || !inner || this._query !== false){\r\n                return this;\r\n            }\r\n\r\n            // Create Item\r\n            option = this.dropdown.querySelector(option);\r\n            if(item.selected){\r\n                inner.insertBefore(option, inner.children[0]);\r\n            } else {\r\n                var grp = this.dropdown.querySelector(\"ul[data-group='\" + item.group + \"']\"),\r\n                    prev = this.options[item.index-1], found = false;\r\n                while(prev && prev.group == item.group){\r\n                    if(found = grp.querySelector(\"li[data-key='\" + prev.key + \"']\")){\r\n                        break;\r\n                    }\r\n                    prev = this.options[prev.index-1];\r\n                }\r\n                if(found && found.nextElementSibling){\r\n                    grp.insertBefore(option, found.nextElementSibling);\r\n                } else {\r\n                    grp.appendChild(option);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n\r\n        /*\r\n         |  API :: UPDATE CSV INPUT\r\n         |  @since  0.5.0 [0.5.0]\r\n         */\r\n        updateCSV: function(item){\r\n            if(!this.csvInput || !this.con.csvOutput){\r\n                return this;\r\n            }\r\n            for(var selected = [], l = this.options.selected.length, i = 0; i < l; i++){\r\n                selected.push(this.options.selected[i].value);\r\n            }\r\n            this.csvInput.value = selected.join(this.con.csvSeparator || \",\");\r\n            return this;\r\n        },\r\n\r\n        /*\r\n         |  PUBLIC :: OPEN DROPDOWN\r\n         |  @since  0.5.0 [0.3.0]\r\n         */\r\n        open: function(animate){\r\n            if(cHAS(this.select, \"active\") || cHAS(this.select, \"idle\") || this.con.disabled){\r\n                return false;\r\n            }\r\n            this.calc();\r\n\r\n            // Final Function\r\n            var final = function(){\r\n                cADD(self.select, \"active\");\r\n                cREM(self.select, \"idle\");\r\n                this.dropdown.style.height = \"auto\";\r\n                this.dropdown.style.overflow = \"visible\";\r\n                this.label.removeAttribute(\"style\");\r\n                if(this.con.search && this.con.searchFocus){\r\n                    this.dropdown.querySelector(\"input\").focus();\r\n                }\r\n                this.trigger.call(this, \"open\");\r\n            }, self = this, e = this.dropdown.style;\r\n\r\n            // Open\r\n            if(animate !== false){\r\n                this.label.style.zIndex = 25;\r\n                this.dropdown.style.cssText += \"height:0;display:block;overflow:hidden;\";\r\n                cADD(self.select, \"idle\");\r\n                (function animate(){\r\n                    var h = parseInt(e.height, 10), m = parseInt(e.maxHeight, 10);\r\n                    if(h >= m){\r\n                        return final.call(self);\r\n                    }\r\n                    e.height = ((h+50 > m)? m: h+50) + \"px\";\r\n                    setTimeout(animate, 20);\r\n                })();\r\n            } else {\r\n                e.cssText = \"height:\" + e.maxHeight + \";display:block;overflow:hidden;\";\r\n                final.call(this);\r\n            }\r\n            return this;\r\n        },\r\n\r\n        /*\r\n         |  PUBLIC :: CLOSE DROPDOWN\r\n         |  @since  0.5.0 [0.3.0]\r\n         */\r\n        close: function(animate){\r\n            if(!cHAS(this.select, \"active\") || cHAS(this.select, \"idle\")){\r\n                return false;\r\n            }\r\n            var final = function(){\r\n                cREM(this.select, \"active\");\r\n                cREM(this.select, \"idle\");\r\n                this.dropdown.removeAttribute(\"style\");\r\n                this.dropdown.querySelector(\".dropdown-inner\").removeAttribute(\"style\");\r\n                this.trigger.call(this, \"close\");\r\n            }, self = this, e = this.dropdown;\r\n\r\n            // Close\r\n            if(animate !== false){\r\n                cADD(this.select, \"idle\");\r\n                this.dropdown.style.overflow = \"hidden\";\r\n                (function animate(){\r\n                    if((parseInt(e.offsetHeight, 10)-50) <= 0){\r\n                        return final.call(self);\r\n                    }\r\n                    e.style.height = (parseInt(e.offsetHeight, 10)-50) + \"px\";\r\n                    setTimeout(animate, 20);\r\n                })();\r\n            } else {\r\n                final.call(this);\r\n            }\r\n            return this;\r\n        },\r\n\r\n        /*\r\n         |  PUBLIC :: TOGGLE DROPDOWN\r\n         |  @since  0.5.0 [0.3.0]\r\n         */\r\n        toggle: function(animate){\r\n            if(cHAS(this.select, \"active\")){\r\n                return this.close(animate);\r\n            }\r\n            return !cHAS(this.select, \"idle\")? this.open(animate): this;\r\n        },\r\n\r\n        /*\r\n         |  PUBLIC :: REMOVE SELECT\r\n         |  @since  0.5.3 [0.3.0]\r\n         */\r\n        remove: function(){\r\n            this.e.removeAttribute(\"data-tail-select\");\r\n            if(this.e.hasAttribute(\"data-select-hidden\")){\r\n                if(this.e.getAttribute(\"data-select-hidden\") == \"0\"){\r\n                    this.e.style.removeProperty(\"display\");\r\n                }\r\n                this.e.removeAttribute(\"data-select-hidden\");\r\n            }\r\n            Array.prototype.map.call(this.e.querySelectorAll(\"[data-select-option='add']\"), function(item){\r\n                item.parentElement.removeChild(item);\r\n            })\r\n            Array.prototype.map.call(this.e.querySelectorAll(\"[data-select-optgroup='add']\"), function(item){\r\n                item.parentElement.removeChild(item);\r\n            })\r\n            this.e.name = (this.csvInput.hasAttribute(\"name\"))? this.csvInput.name: this.e.name;\r\n            if(this.select.parentElement){\r\n                this.select.parentElement.removeChild(this.select);\r\n            }\r\n            if(this.container){\r\n                var handles = this.container.querySelectorAll(\".select-handle\");\r\n                for(var l = handles.length, i = 0; i < l; i++){\r\n                    this.container.removeChild(handles[i]);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n\r\n        /*\r\n         |  PUBLIC :: RELOAD SELECT\r\n         |  @since  0.5.0 [0.3.0]\r\n         */\r\n        reload: function(){\r\n            return this.remove().init();\r\n        },\r\n\r\n        /*\r\n         |  PUBLIC :: GET|SET CONFIG\r\n         |  @since  0.5.15 [0.4.0]\r\n         */\r\n        config: function(key, value, rebuild){\r\n            if(key instanceof Object){\r\n                for(var k in key){ this.config(k, key[k], false); }\r\n                return this.reload()? this.con: this.con;\r\n            }\r\n            if(typeof(key) == \"undefined\"){\r\n                return this.con;\r\n            } else if(!(key in this.con)){\r\n                return false;\r\n            }\r\n\r\n            // Set | Return\r\n            if(typeof(value) == \"undefined\"){\r\n                return this.con[key];\r\n            }\r\n            this.con[key] = value;\r\n            if(rebuild !== false){\r\n                this.reload();\r\n            }\r\n            return this;\r\n        },\r\n        enable: function(update){\r\n            cREM(this.select, \"disabled\");\r\n            this.e.disabled = false;\r\n            this.con.disabled = false;\r\n            return (update === false)? this: this.reload();\r\n        },\r\n        disable: function(update){\r\n            cADD(this.select, \"disabled\");\r\n            this.e.disabled = true;\r\n            this.con.disabled = true;\r\n            return (update === false)? this: this.reload();\r\n        },\r\n\r\n        /*\r\n         |  PUBLIC :: CUSTOM EVENT LISTENER\r\n         |  @since  0.5.0 [0.4.0]\r\n         */\r\n        on: function(event, callback, args){\r\n            if([\"open\", \"close\", \"change\"].indexOf(event) < 0 || typeof(callback) != \"function\"){\r\n                return false;\r\n            }\r\n            if(!(event in this.events)){\r\n                this.events[event] = [];\r\n            }\r\n            this.events[event].push({cb: callback, args: (args instanceof Array)? args: []});\r\n            return this;\r\n        },\r\n\r\n        /*\r\n         |  PUBLIC :: VALUE\r\n         |  @since  0.5.13 [0.5.13]\r\n         */\r\n        value: function(){\r\n            if(this.options.selected.length == 0){\r\n                return null;\r\n            }\r\n            if(this.con.multiple){\r\n                return this.options.selected.map(function(opt){\r\n                    return opt.value;\r\n                });\r\n            }\r\n            return this.options.selected[0].value;\r\n        }\r\n    };\r\n\r\n    /*\r\n     |  OPTIONS CONSTRUCTOR\r\n     |  @since  0.5.12 [0.3.0]\r\n     */\r\n    options = select.options = function(select, parent){\r\n        if(!(this instanceof options)){\r\n            return new options(select, parent);\r\n        }\r\n        this.self = parent;\r\n        this.element = select;\r\n        this.length = 0;\r\n        this.selected = [];\r\n        this.disabled = [];\r\n        this.items = {\"#\": {}};\r\n        this.groups = {};\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     |  TAIL.OPTIONS HANDLER\r\n     */\r\n    options.prototype = {\r\n        /*\r\n         |  INTERNAL :: REPLACE TYPOs\r\n         |  @since  0.5.0 [0.3.0]\r\n         */\r\n        _r: function(state){\r\n            return state.replace(\"disabled\", \"disable\").replace(\"enabled\", \"enable\")\r\n                        .replace(\"selected\", \"select\").replace(\"unselected\", \"unselect\");\r\n        },\r\n\r\n        /*\r\n         |  GET AN EXISTING OPTION\r\n         |  @since  0.5.7 [0.3.0]\r\n         */\r\n        get: function(key, grp){\r\n            var g = \"getAttribute\";\r\n            if(typeof(key) == \"object\" && key.key && key.group){\r\n                grp = key.group || grp;\r\n                key = key.key;\r\n            } else if(key instanceof Element){\r\n                if(key.tagName == \"OPTION\"){\r\n                    grp = key.parentElement.label || \"#\";\r\n                    key = key.value || key.innerText;\r\n                } else if(key.hasAttribute(\"data-key\")){\r\n                    grp = key[g](\"data-group\") || key.parentElement[g](\"data-group\") || \"#\";\r\n                    key = key[g](\"data-key\");\r\n                }\r\n            } else if(typeof(key) != \"string\"){\r\n                return false;\r\n            }\r\n            key = (/^[0-9]+$/.test(key))? \"_\" + key: key;\r\n            return (grp in this.items)? this.items[grp][key]: false;\r\n        },\r\n\r\n        /*\r\n         |  SET AN EXISTING OPTION\r\n         |  @since  0.5.15 [0.3.0]\r\n         */\r\n        set: function(opt, rebuild){\r\n            var key = opt.value || opt.innerText, grp = opt.parentElement.label || \"#\";\r\n            if(!(grp in this.items)){\r\n                this.items[grp] = {};\r\n                this.groups[grp] = opt.parentElement;\r\n            }\r\n            if(key in this.items[grp]){\r\n                return false;\r\n            }\r\n            var id = (/^[0-9]+$/.test(key))? \"_\" + key: key;\r\n\r\n            // Validate Selection\r\n            var con = this.self.con;\r\n            if(con.multiple && this.selected.length >= con.multiLimit){\r\n                opt.selected = false;\r\n            }\r\n            if(opt.selected && con.deselect && (!opt.hasAttribute(\"selected\") || con.multiLimit == 0)){\r\n                opt.selected = false;\r\n                opt.parentElement.selectedIndex = -1;\r\n            }\r\n\r\n            // Sanitize Description\r\n            if(opt.hasAttribute(\"data-description\")){\r\n                var span = create(\"SPAN\");\r\n                    span.innerHTML = opt.getAttribute(\"data-description\");\r\n                opt.setAttribute(\"data-description\", span.innerHTML);\r\n            }\r\n\r\n            // Add Item\r\n            this.items[grp][id] = {\r\n                key: key,\r\n                value: opt.text,\r\n                description: opt.getAttribute(\"data-description\") || null,\r\n                group: grp,\r\n                option: opt,\r\n                optgroup: (grp != \"#\")? this.groups[grp]: undefined,\r\n                selected: opt.selected,\r\n                disabled: opt.disabled,\r\n                hidden: opt.hidden || false\r\n            };\r\n            this.length++;\r\n            if(opt.selected){ this.select(this.items[grp][id]); }\r\n            if(opt.disabled){ this.disable(this.items[grp][id]); }\r\n            return (rebuild)? this.self.callback(this.items[grp][key], \"rebuild\"): true;\r\n        },\r\n\r\n        /*\r\n         |  CREATE A NEW OPTION\r\n         |  @since  0.5.13 [0.3.0]\r\n         */\r\n        add: function(key, value, group, selected, disabled, description, rebuild){\r\n            if(key instanceof Object){\r\n                for(var k in key){\r\n                    this.add(key[k].key || k, key[k].value, key[k].group, key[k].selected, key[k].disabled, key[k].description, false);\r\n                }\r\n                return this.self.query();\r\n            }\r\n            if(this.get(key, group)){\r\n                return false;\r\n            }\r\n\r\n            // Check Group\r\n            group = (typeof(group) == \"string\")? group: \"#\";\r\n            if(group !== \"#\" && !(group in this.groups)){\r\n                var optgroup = create(\"OPTGROUP\");\r\n                optgroup.label = group;\r\n                optgroup.setAttribute(\"data-select-optgroup\", \"add\");\r\n                this.element.appendChild(optgroup);\r\n                this.items[group] = {};\r\n                this.groups[group] = optgroup;\r\n            }\r\n\r\n            // Validate Selection\r\n            if(this.self.con.multiple && this.selected.length >= this.self.con.multiLimit){\r\n                selected = false;\r\n            }\r\n            disabled = !!disabled;\r\n\r\n            // Create Option\r\n            var option = d.createElement(\"OPTION\");\r\n            option.value = key;\r\n            option.selected = selected;\r\n            option.disabled = disabled;\r\n            option.innerText = value;\r\n            option.setAttribute(\"data-select-option\", \"add\");\r\n            if(description && description.length > 0){\r\n                option.setAttribute(\"data-description\", description);\r\n            }\r\n\r\n            // Add Option and Return\r\n            ((group == \"#\")? this.element: this.groups[group]).appendChild(option);\r\n            return this.set(option, rebuild);\r\n        },\r\n\r\n        /*\r\n         |  MOVE AN EXISTING OPTION\r\n         |  @since  0.5.0 [0.5.0]\r\n         */\r\n        move: function(item, group, new_group, rebuild){\r\n            if(!(item = this.get(item, group))){ return false; }\r\n\r\n            // Create Group\r\n            if(new_group !== \"#\" && !(new_group in this.groups)){\r\n                var optgroup = create(\"OPTGROUP\");\r\n                optgroup.label = new_group;\r\n                this.element.appendChild(optgroup);\r\n                this.items[new_group] = {};\r\n                this.groups[new_group] = optgroup;\r\n                this.groups[new_group].appendChild(item.option);\r\n            }\r\n\r\n            // Move To Group\r\n            delete this.items[item.group][item.key];\r\n            item.group = new_group;\r\n            item.optgroup = this.groups[new_group] || undefined;\r\n            this.items[new_group][item.key] = item;\r\n            return (rebuild)? this.self.query(): true;\r\n        },\r\n\r\n        /*\r\n         |  REMOVE AN EXISTING OPTION\r\n         |  @since  0.5.7 [0.3.0]\r\n         */\r\n        remove: function(item, group, rebuild){\r\n            if(!(item = this.get(item, group))){ return false; }\r\n            if(item.selected){ this.unselect(item); }\r\n            if(item.disabled){ this.enable(item); }\r\n\r\n            // Remove Data\r\n            item.option.parentElement.removeChild(item.option);\r\n            var id = (/^[0-9]+$/.test(item.key))? \"_\" + item.key: item.key;\r\n            delete this.items[item.group][id];\r\n            this.length--;\r\n\r\n            // Remove Optgroup\r\n            if(Object.keys(this.items[item.group]).length === 0){\r\n                delete this.items[item.group];\r\n                delete this.groups[item.group];\r\n            }\r\n            return (rebuild)? this.self.query(): true;\r\n        },\r\n\r\n        /*\r\n         |  CHECK AN EXISTING OPTION\r\n         |  @since  0.5.0 [0.3.0]\r\n         */\r\n        is: function(state, key, group){\r\n            var state = this._r(state), item = this.get(key, group);\r\n            if(!item || [\"select\", \"unselect\", \"disable\", \"enable\"].indexOf(state) < 0){\r\n                return null;\r\n            }\r\n            if(state == \"disable\" || state == \"enable\"){\r\n                return (state == \"disable\")? item.disabled: !item.disabled;\r\n            } else if(state == \"select\" || state == \"unselect\"){\r\n                return (state == \"select\")? item.selected: !item.selected;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        /*\r\n         |  INTERACT WITH AN OPTION\r\n         |  @since  0.5.3 [0.3.0]\r\n         */\r\n        handle: function(state, key, group, _force){\r\n            var item = this.get(key, group), state = this._r(state);\r\n            if(!item || [\"select\", \"unselect\", \"disable\", \"enable\"].indexOf(state) < 0){\r\n                return null;\r\n            }\r\n\r\n            // Disable || Enable\r\n            if(state == \"disable\" || state == \"enable\"){\r\n                if(!(item.option in this.disabled) && state == \"disable\"){\r\n                    this.disabled.push(item.option);\r\n                } else if((item.option in this.disabled) && state == \"enable\"){\r\n                    this.disabled.splice(this.disabled.indexOf(item.option), 1);\r\n                }\r\n                item.disabled = (state == \"disable\");\r\n                item.option.disabled = (state == \"disable\");\r\n                return this.self.callback.call(this.self, item, state);\r\n            }\r\n\r\n            // Select || Unselect\r\n            var dis = (cHAS(this.self.select, \"disabled\") || item.disabled || item.option.disabled),\r\n                lmt = (this.self.con.multiple && this.self.con.multiLimit <= this.selected.length),\r\n                sgl = (!this.self.con.multiple && this.selected.indexOf(item.option) > 0),\r\n                del = (this.self.con.multiLimit == 0 && this.self.con.deselect == true),\r\n                uns = (!this.self.con.multiple && !this.self.con.deselect && _force !== true);\r\n            if(state == \"select\"){\r\n                if(dis || lmt || del || sgl){\r\n                    return false;\r\n                }\r\n                if(!this.self.con.multiple){\r\n                    for(var i in this.selected){\r\n                        this.unselect(this.selected[i], undefined, true);\r\n                    }\r\n                }\r\n                if(this.selected.indexOf(item.option) < 0){\r\n                    this.selected.push(item.option);\r\n                }\r\n            } else if(state == \"unselect\"){\r\n                if(dis || uns){\r\n                    return false;\r\n                }\r\n                this.selected.splice(this.selected.indexOf(item.option), 1);\r\n            }\r\n            item.selected = (state == \"select\");\r\n            item.option.selected = (state == \"select\");\r\n            item.option[(state.length > 6? \"remove\": \"set\") + \"Attribute\"](\"selected\", \"selected\");\r\n            return this.self.callback.call(this.self, item, state, _force);\r\n        },\r\n        enable: function(key, group){\r\n            return this.handle(\"enable\", key, group, false);\r\n        },\r\n        disable: function(key, group){\r\n            return this.handle(\"disable\", key, group, false);\r\n        },\r\n        select: function(key, group){\r\n            return this.handle(\"select\", key, group, false);\r\n        },\r\n        unselect: function(key, group, _force){\r\n            return this.handle(\"unselect\", key, group, _force);\r\n        },\r\n        toggle: function(item, group){\r\n            if(!(item = this.get(item, group))){ return false; }\r\n            return this.handle((item.selected? \"unselect\": \"select\"), item, group, false);\r\n        },\r\n\r\n        /*\r\n         |  INVERT CURRENT <STATE>\r\n         |  @since  0.5.15 [0.3.0]\r\n         */\r\n        invert: function(state){\r\n            state = this._r(state);\r\n            if([\"enable\", \"disable\"].indexOf(state) >= 0){\r\n                var invert = this.disabled, action = (state == \"enable\")? \"disable\": \"enable\";\r\n            } else if([\"select\", \"unselect\"].indexOf(state) >= 0){\r\n                var invert = this.selected, action = (state == \"select\")? \"unselect\": \"select\";\r\n            }\r\n            var convert = Array.prototype.filter.call(this, function(element){\r\n                return !(element in invert);\r\n            }), self = this;\r\n\r\n            // Loop\r\n            [].concat(invert).forEach(function(item){\r\n                self.handle.call(self, action, item);\r\n            });\r\n            [].concat(convert).forEach(function(item){\r\n                self.handle.call(self, state, item);\r\n            });\r\n            return true;\r\n        },\r\n\r\n        /*\r\n         |  SET <STATE> ON ALL OPTIONs\r\n         |  @since  0.5.0 [0.5.0]\r\n         */\r\n        all: function(state, group){\r\n            var self = this, list = this;\r\n            if(group in this.items){\r\n                list = Object.keys(this.items[group]);\r\n            } else if([\"unselect\", \"enable\"].indexOf(state) >= 0){\r\n                list = [].concat((state == \"unselect\")? this.selected: this.disabled);\r\n            }\r\n            Array.prototype.forEach.call(list, function(item){\r\n                self.handle.call(self, state, item, group, false);\r\n            });\r\n            return true;\r\n        },\r\n\r\n        /*\r\n         |  SET <STATE> FOR A BUNCH OF OPTIONs\r\n         |  @since  0.5.4 [0.5.3]\r\n         */\r\n        walk: function(state, items, args){\r\n            if(items instanceof Array || items.length){\r\n                for(var l = items.length, i = 0; i < l; i++){\r\n                    this.handle.apply(this, [state, items[i], null].concat(args));\r\n                }\r\n            } else if(items instanceof Object){\r\n                var self = this;\r\n                if(items.forEach){\r\n                    items.forEach(function(value){\r\n                        self.handle.apply(self, [state, value, null].concat(args));\r\n                    });\r\n                } else {\r\n                    for(var key in items){\r\n                        if(typeof(items[key]) != \"string\" && typeof(items[key]) != \"number\" && !(items[key] instanceof Element)){\r\n                            continue;\r\n                        }\r\n                        this.handle.apply(this, [state, items[key], (key in this.items? key: null)]).concat(args);\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n\r\n        /*\r\n         |  APPLY LINGUSTIC RULES\r\n         |  @since  0.5.13 [0.5.13]\r\n         */\r\n        applyLinguisticRules: function(search, casesensitive){\r\n            var rules = this.self.con.linguisticRules, values = [];\r\n            \r\n            // Prepare Rules\r\n            Object.keys(rules).forEach(function(key){ \r\n                values.push(\"(\" + key + \"|[\" + rules[key] + \"])\");\r\n            });\r\n            if(casesensitive){\r\n                values = values.concat(values.map(function(s){ return s.toUpperCase(); })); \r\n            }\r\n\r\n            return search.replace(new RegExp(values.join(\"|\"), (casesensitive)? \"g\": \"ig\"), function(m){\r\n                return values[[].indexOf.call(arguments, m, 1) - 1];\r\n            });\r\n        },\r\n    \r\n\r\n        /*\r\n         |  FIND SOME OPTIONs - ARRAY EDITION\r\n         |  @since  0.5.15 [0.3.0]\r\n         */\r\n        find: function(search, config){\r\n            var self = this, matches, has = {};\r\n            \r\n            // Get Config\r\n            if(!config){\r\n                config = this.self.con.searchConfig;\r\n            }\r\n\r\n            // Config Callback\r\n            if(typeof config === \"function\"){\r\n                matches = config.bind(this, search);\r\n            }\r\n\r\n            // Config Handler\r\n            else {\r\n                config = (config instanceof Array)? config: [config];\r\n                config.forEach(function(c){\r\n                    if(typeof(c) === \"string\"){ has[c] = true; }\r\n                });\r\n                has.any = (!has.any)? has.attributes && has.value: has.any;\r\n                \r\n                // Cleanup & Prepare\r\n                if(!has.regex || has.text){\r\n                    search = search.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\r\n                }\r\n                if(!has.exactglyphes){\r\n                    search = this.self.options.applyLinguisticRules(search, has.case);\r\n                }\r\n                if(has.word){\r\n                    search = '\\\\b' + search + '\\\\b';\r\n                }\r\n\r\n                // Search\r\n                var regex = new RegExp(search, (!has.case)? \"mi\": \"m\"),\r\n                    sfunc = function(opt){ return regex.test(opt.text || opt.value); };\r\n                \r\n                // Handle\r\n                if(has.any){\r\n                    matches = function(opt){ return sfunc(opt) || [].some.call(opt.attributes, sfunc); };\r\n                } else if(has.attributes){\r\n                    matches = function(opt){ return [].some.call(opt.attributes, sfunc); };\r\n                } else {\r\n                    matches = sfunc;\r\n                }\r\n\r\n                if(!this.self.con.searchDisabled){\r\n                    var temp = matches;\r\n                    matches = function(opt){ return !opt.disabled && temp(opt); };\r\n                }\r\n            }\r\n\r\n            // Hammer Time\r\n            return [].filter.call(this.self.e.options, matches).map(function(opt){\r\n                return opt.hidden? false: self.get(opt) \r\n            });\r\n        },\r\n\r\n        /*\r\n         |  FIND SOME OPTIONs - WALKER EDITION\r\n         |  @since  0.5.5 [0.3.0]\r\n         */\r\n        finder: function(search, config){\r\n            if(this._finderLoop === undefined){\r\n                this._finderLoop = this.find(search, config);\r\n            }\r\n            var item;\r\n            while((item = this._finderLoop.shift()) !== undefined){\r\n                return item;\r\n            }\r\n            delete this._finderLoop;\r\n            return false;\r\n        },\r\n\r\n        /*\r\n         |  NEW OPTIONS WALKER\r\n         |  @since  0.5.15 [0.4.0]\r\n         */\r\n        walker: function(orderi, orderg){\r\n            if(typeof(this._inLoop) != \"undefined\" && this._inLoop){\r\n                if(this._inItems.length > 0){\r\n                    do {\r\n                        var temp = this.items[this._inGroup][this._inItems.shift()];\r\n                    } while(temp.hidden === true);\r\n                    return temp;\r\n                }\r\n\r\n                // Sort Items\r\n                if(this._inGroups.length > 0){\r\n                    while(this._inGroups.length > 0){\r\n                        var group = this._inGroups.shift();\r\n                        if(!(group in this.items)){\r\n                            return false;\r\n                        }\r\n\r\n                        var keys = Object.keys(this.items[group]);\r\n                        if(keys.length > 0){\r\n                            break;\r\n                        }\r\n                    }\r\n                    if(orderi == \"ASC\"){\r\n                        keys.sort();\r\n                    } else if(orderi == \"DESC\"){\r\n                        keys.sort().reverse();\r\n                    } else if(typeof(orderi) == \"function\"){\r\n                        keys = orderi.call(this, keys);\r\n                    }\r\n                    this._inItems = keys;\r\n                    this._inGroup = group;\r\n                    return this.walker(null, null);\r\n                }\r\n\r\n                // Delete and Exit\r\n                delete this._inLoop;\r\n                delete this._inItems;\r\n                delete this._inGroup;\r\n                delete this._inGroups;\r\n                return false;\r\n            }\r\n\r\n            // Sort Groups\r\n            var groups = Object.keys(this.groups) || [];\r\n            if(orderg == \"ASC\"){\r\n                groups.sort();\r\n            } else if(orderg == \"DESC\"){\r\n                groups.sort().reverse();\r\n            } else if(typeof(orderg) == \"function\"){\r\n                groups = orderg.call(this, groups);\r\n            }\r\n            groups.unshift(\"#\");\r\n\r\n            // Init Loop\r\n            this._inLoop = true;\r\n            this._inItems = [];\r\n            this._inGroups = groups;\r\n            return this.walker(orderi, null);\r\n        }\r\n    };\r\n\r\n    // Return\r\n    return select;\r\n}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tail.select/js/tail.select.js\n");

/***/ }),

/***/ 1:
/*!**********************************************************!*\
  !*** multi ./node_modules/tail.select/js/tail.select.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! D:\Escritorio\Andres\Laravel\proyecto_final\node_modules\tail.select\js\tail.select.js */"./node_modules/tail.select/js/tail.select.js");


/***/ })

/******/ });